#!/usr/bin/env sh

# Description: Sample script to play files in apps by file type or mime
#
# Shell: POSIX compliant
# Usage: nuke filepath
#
# Integration with nnn:
#   1. Export the required config:
#         export NNN_OPENER=/absolute/path/to/nuke
#         # Otherwise, if nuke is in $PATH
#         # export NNN_OPENER=nuke
#   2. Run nnn with the program option to indicate a CLI opener
#         nnn -c
#         # The -c program option overrides option -e
#   3. nuke can use nnn plugins (e.g. mocq is used for audio), $PATH is updated.
#
# Details:
#   Inspired by ranger's scope.sh, modified for usage with nnn.
#
#   Guards against accidentally opening mime types like executables, shared libs etc.
#
#   Tries to play 'file' (1st argument) in the following order:
#     1. by extension
#     2. by mime (image, video, audio, pdf)
#     3. by mime (other file types)
#     4. by mime (prompt and run executables)
#
# Modification tips:
#   1. Invokes CLI utilities by default. Set GUI to 1 to enable GUI apps.
#   2. PAGER is "less -R".
#   3. Start GUI apps in bg to unblock. Redirect stdout and strerr if required.
#   4. Some CLI utilities are piped to the $PAGER, to wait and quit uniformly.
#   5. If the output cannot be paged use "read -r _" to wait for user input.
#   6. On a DE, try 'xdg-open' or 'open' in handle_fallback() as last resort.
#
#   Feel free to change the utilities to your favourites and add more mimes.
#
# Defaults:
#   By extension (only the enabled ones):
#      most archives: list with atool, bsdtar
#      rar: list with unrar
#      7-zip: list with 7z
#      pdf: zathura (GUI), pdftotext, mutool, exiftool
#      audio: mocq (nnn plugin using MOC), mpv, media_client (Haiku), mediainfo, exiftool
#      avi|mkv|mp4: smplayer, mpv (GUI), ffmpegthumbnailer, mediainfo, exiftool
#      log: vi
#      torrent: rtorrent, transmission-show
#      odt|ods|odp|sxw: odt2txt
#      md: glow (https://github.com/charmbracelet/glow), lowdown (https://kristaps.bsd.lv/lowdown)
#      htm|html|xhtml: w3m, lynx, elinks
#      json: jq, python (json.tool module)
#   Multimedia by mime:
#      image/*: imv/sxiv/nsxiv (GUI), viu (https://github.com/atanunq/viu), img2txt, exiftool
#      video/*: smplayer, mpv (GUI), ffmpegthumbnailer, mediainfo, exiftool
#      audio/*: mocq (nnn plugin using MOC), mpv, media_client (Haiku), mediainfo, exiftool
#      application/pdf: zathura (GUI), pdftotext, mutool, exiftool
#   Other mimes:
#      text/troff: man -l
#      text/* | */xml: vi
#      image/vnd.djvu): djvutxt, exiftool
#
# TODO:
#   1. Adapt, test and enable all mimes
#   2. Clean-up the unnecessary exit codes

# set to 1 to enable GUI apps and/or BIN execution
GUI="1"
BIN="1"

set -euf -o noclobber -o noglob -o nounset
IFS="$(printf '%b_' '\n')"; IFS="${IFS%_}" # protect trailing \n

PATH=$PATH:"${XDG_CONFIG_HOME:-$HOME/.config}/nnn/plugins"

FPATH="$1"
FNAME=$(basename "$1")
EDITOR="${VISUAL:-${EDITOR:-vi}}"
PAGER="${PAGER:-less -R}"
ext="${FNAME##*.}"
if [ -n "$ext" ]; then
    ext="$(printf "%s" "${ext}" | tr '[:upper:]' '[:lower:]')"
fi

is_mac() {
    uname | grep -q "Darwin"
}

handle_pdf() {
    if [ "$GUI" -ne 0 ]; then
        if is_mac; then
            nohup open "${FPATH}" >/dev/null 2>&1 &
        elif type zathura >/dev/null 2>&1; then
            nohup zathura "${FPATH}" >/dev/null 2>&1 &
        elif type okular >/dev/null 2>&1; then
            nohup okular "${FPATH}" >/dev/null 2>&1 &
        else
            return
        fi
    elif type pdftotext >/dev/null 2>&1; then
        ## Preview as text conversion
        exec pdftotext -l 10 -nopgbrk -q -- "${FPATH}" - | eval "$PAGER"
    elif type mutool >/dev/null 2>&1; then
        exec mutool draw -F txt -i -- "${FPATH}" 1-10 | eval "$PAGER"
    elif type exiftool >/dev/null 2>&1; then
        exec exiftool "${FPATH}" | eval "$PAGER"
    else
        return
    fi
    exit 0
}

handle_audio() {
    if type mocp >/dev/null 2>&1 && type mocq >/dev/null 2>&1; then
        nohup mocq "${FPATH}" "opener" >/dev/null 2>&1
    elif type mpv >/dev/null 2>&1; then
        nohup mpv "${FPATH}" >/dev/null 2>&1 &
    elif type media_client >/dev/null 2>&1; then
        nohup media_client play "${FPATH}" >/dev/null 2>&1 &
    elif type mediainfo >/dev/null 2>&1; then
        exec mediainfo "${FPATH}" | eval "$PAGER"
    elif type exiftool >/dev/null 2>&1; then
        exec exiftool "${FPATH}"| eval "$PAGER"
    else
        return
    fi
    exit 0
}

handle_video() {
    if [ "$GUI" -ne 0 ]; then
        if is_mac; then
            nohup open "${FPATH}" >/dev/null 2>&1 &
        elif type smplayer >/dev/null 2>&1; then
            nohup smplayer "${FPATH}" >/dev/null 2>&1 &
        elif type mpv >/dev/null 2>&1; then
            nohup mpv "${FPATH}" >/dev/null 2>&1 &
        elif type vlc >/dev/null 2>&1; then
            nohup vlc "${FPATH}" >/dev/null 2>&1 &
        else
            return
        fi
    elif type mediainfo >/dev/null 2>&1; then
        exec mediainfo "${FPATH}" | eval "$PAGER"
    elif type exiftool >/dev/null 2>&1; then
        exec exiftool "${FPATH}"| eval "$PAGER"
    else
        return
    fi
    exit 0
}

# handle this extension and exit
handle_extension() {
    case "${ext}" in
        ## Archive
        a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|\
        rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)
            if type atool >/dev/null 2>&1; then
                exec atool --list -- "${FPATH}" | eval "$PAGER"
                exit 0
            elif type bsdtar >/dev/null 2>&1; then
                exec bsdtar --list --file "${FPATH}" | eval "$PAGER"
                exit 0
            fi
            exit 1;;
        rar)
            if type unrar >/dev/null 2>&1; then
                ## Avoid password prompt by providing empty password
                exec unrar lt -p- -- "${FPATH}" | eval "$PAGER"
            fi
            exit 1;;
        7z)
            if type 7z >/dev/null 2>&1; then
                ## Avoid password prompt by providing empty password
                exec 7z l -p -- "${FPATH}" | eval "$PAGER"
                exit 0
            fi
            exit 1;;

        ## PDF
        pdf)
            handle_pdf
            exit 1;;

        ## Audio
        aac|flac|m4a|mid|midi|mpa|mp2|mp3|ogg|wav|wma)
            handle_audio
            exit 1;;

        ## Video
        avi|mkv|mp4)
            handle_video
            exit 1;;

        ## Markdown & Log files
        md|log)
            exec "$EDITOR" "${FPATH}"
            exit 0;;

        ## database
        db)
            if type visidata >/dev/null 2>&1; then
                exec visidata "${FPATH}"
                exit 0
            fi
            exit 1;;

        ## BitTorrent
        torrent)
            if type rtorrent >/dev/null 2>&1; then
                nohup rtorrent "${FPATH}" >/dev/null 2>&1 &
                exit 0
            elif type transmission-show >/dev/null 2>&1; then
                nohup transmission-show -- "${FPATH}" >/dev/null 2>&1 &
                exit 0
            elif type qbittorrent >/dev/null 2>&1; then
                nohup qbittorrent "${FPATH}" >/dev/null 2>&1 &
                exit 0
            fi
            exit 1;;

        ## OpenDocument
        odt|ods|odp|sxw)
            if type odt2txt >/dev/null 2>&1; then
                ## Preview as text conversion
                exec odt2txt "${FPATH}" | eval "$PAGER"
                exit 0
            fi
            exit 1;;

        ## HTML
        htm|html|xhtml)
            ## Preview as text conversion
            if type w3m >/dev/null 2>&1; then
                exec w3m -dump "${FPATH}" | eval "$PAGER"
                exit 0
            elif type lynx >/dev/null 2>&1; then
                exec lynx -dump -- "${FPATH}" | eval "$PAGER"
                exit 0
            elif type elinks >/dev/null 2>&1; then
                exec elinks -dump "${FPATH}" | eval "$PAGER"
                exit 0
            fi
            ;;

        ## JSON
        json)
            if type jq >/dev/null 2>&1; then
                exec jq --color-output . "${FPATH}" | eval "$PAGER"
                exit 0
            elif type python >/dev/null 2>&1; then
                exec python -m json.tool -- "${FPATH}" | eval "$PAGER"
                exit 0
            fi
            ;;
    esac
}

# sets the variable abs_target, this should be faster than calling printf
abspath() {
    case "$1" in
        /*) abs_target="$1";;
        *)  abs_target="$PWD/$1";;
    esac
}

# storing the result to a tmp file is faster than calling listimages twice
listimages() {
    find -L "///${1%/*}" -maxdepth 1 -type f -print0 |
        grep -izZE '\.(jpe?g|png|gif|webp|tiff|bmp|ico|svg)$' |
        sort -zV | tee "$tmp"
}

load_dir() {
    abspath "$2"
    tmp="${TMPDIR:-/tmp}/nuke_$$"
    trap 'rm -f -- "$tmp"' EXIT
    count="$(listimages "$abs_target" | grep -a -m 1 -ZznF "$abs_target" | cut -d: -f1)"

    if [ -n "$count" ]; then
        if [ "$GUI" -ne 0 ]; then
            xargs -0 nohup "$1" -n "$count" -- < "$tmp"
        else
            xargs -0 "$1" -n "$count" -- < "$tmp"
        fi
    else
        shift
        "$1" -- "$@" # fallback
    fi
}

handle_multimedia() {
    ## Size of the preview if there are multiple options or it has to be
    ## rendered from vector graphics. If the conversion program allows
    ## specifying only one dimension while keeping the aspect ratio, the width
    ## will be used.
    # local DEFAULT_SIZE="1920x1080"

    mimetype="${1}"
    case "${mimetype}" in
        ## Image
        image/*)
            if [ "$GUI" -ne 0 ]; then
                if is_mac; then
                    nohup open "${FPATH}" >/dev/null 2>&1 &
                    exit 0
                elif type imv >/dev/null 2>&1; then
                    load_dir imv "${FPATH}" >/dev/null 2>&1 &
                    exit 0
                elif type imvr >/dev/null 2>&1; then
                    load_dir imvr "${FPATH}" >/dev/null 2>&1 &
                    exit 0
                elif type sxiv >/dev/null 2>&1; then
                    load_dir sxiv "${FPATH}" >/dev/null 2>&1 &
                    exit 0
                elif type nsxiv >/dev/null 2>&1; then
                    load_dir nsxiv "${FPATH}" >/dev/null 2>&1 &
                    exit 0
                elif type gwenview >/dev/null 2>&1; then
                    nohup gwenview "${FPATH}" >/dev/null 2>&1 &
                    exit 0
                fi
            elif type viu >/dev/null 2>&1; then
                viu -n "${FPATH}" | eval "$PAGER"
                exit 0
            elif type img2txt >/dev/null 2>&1; then
                img2txt --gamma=0.6 -- "${FPATH}" | eval "$PAGER"
                exit 0
            elif type exiftool >/dev/null 2>&1; then
                exiftool "${FPATH}" | eval "$PAGER"
                exit 0
            fi

            ## `w3mimgdisplay` will be called for all images (unless overridden
            ## as above), but might fail for unsupported types.
            exit 7;;

        ## PDF
        application/pdf)
            handle_pdf
            exit 1;;

        ## Audio
        audio/*)
            handle_audio
            exit 1;;

        ## Video
        video/*)
            handle_video
            exit 1;;

    esac
}

handle_mime() {
    mimetype="${1}"
    case "${mimetype}" in
        ## Folder
        inode/directory)
            exec nnn -- "${FPATH}"
            exit 0;;
        ## Manpages
        text/troff)
            exec man -l "${FPATH}"
            exit 0;;

        ## CSV
        text/csv)
            exec visidata "${FPATH}"
            exit 0;;

        ## Text
        text/* | */xml)
            exec "$EDITOR" "${FPATH}"
            exit 0;;

        ## DjVu
        image/vnd.djvu)
            if type djvutxt >/dev/null 2>&1; then
                ## Preview as text conversion (requires djvulibre)
                exec djvutxt "${FPATH}" | eval "$PAGER"
                exit 0
            elif type exiftool >/dev/null 2>&1; then
                exec exiftool "${FPATH}" | eval "$PAGER"
                exit 0
            fi
            exit 1;;
    esac
}

handle_fallback() {
    if [ "$GUI" -ne 0 ]; then
        if type xdg-open >/dev/null 2>&1; then
            nohup xdg-open "${FPATH}" >/dev/null 2>&1 &
            exit 0
        elif type open >/dev/null 2>&1; then
            nohup open "${FPATH}" >/dev/null 2>&1 &
            exit 0
        fi
    fi

    echo '----- File details -----' && file --dereference --brief -- "${FPATH}"
    exit 1
}

handle_blocked() {
    case "${MIMETYPE}" in
        application/x-sharedlib)
            exit 0;;

        application/x-shared-library-la)
            exit 0;;

        application/x-executable)
            exit 0;;

        application/x-shellscript)
            exit 0;;

        application/octet-stream)
            exit 0;;
    esac
}

handle_bin() {
    case "${MIMETYPE}" in
        application/x-executable|application/x-shellscript)
        clear
        echo '-------- Executable File --------' && file --dereference --brief -- "${FPATH}"
        printf "Run executable (y/N/'a'rgs)? "
        read -r answer
        case "$answer" in
            [Yy]* ) exec "${FPATH}";;
            [Aa]* )
                printf "args: "
                read -r args
                exec "${FPATH}" "$args";;
            [Nn]* ) exit;;
        esac
    esac
}

MIMETYPE="$( file -bL --mime-type -- "${FPATH}" )"
handle_extension
handle_multimedia "${MIMETYPE}"
handle_mime "${MIMETYPE}"
[ "$BIN" -ne 0 ] && [ -x "${FPATH}" ] && handle_bin
handle_blocked "${MIMETYPE}"
handle_fallback

exit 1
